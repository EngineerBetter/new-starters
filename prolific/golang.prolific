I know about packages, variables and functions in Golang

On [A Tour of Go](https://tour.golang.org/welcome/1) complete the _Packages, variables and functions_ section.

## Acceptance Steps

* Talk to your mentor about what you've learnt

- [ ] Completed: Packages
- [ ] Completed: Imports
- [ ] Completed: Exported names
- [ ] Completed: Functions
- [ ] Completed: Functions continued
- [ ] Completed: Multiple results
- [ ] Completed: Named return values
- [ ] Completed: Variables
- [ ] Completed: Variables with initializers
- [ ] Completed: Short variable declarations
- [ ] Completed: Basic types
- [ ] Completed: Zero values
- [ ] Completed: Type conversions
- [ ] Completed: Type inference
- [ ] Completed: Constants
- [ ] Completed: Numeric Constants

L: self-paced, golang

---

I know about flow control statements in Golang

On [A Tour of Go](https://tour.golang.org/welcome/1) complete the _Flow control statements_ section.

## Acceptance Steps

* Talk to your mentor about what you've learnt

- [ ] Completed: For
- [ ] Completed: For continued
- [ ] Completed: For is Go's while
- [ ] Completed: Forever
- [ ] Completed: If
- [ ] Completed: If with a short statement
- [ ] Completed: If and else
- [ ] Completed: Exercise: Loops and Functions
- [ ] Completed: Switch
- [ ] Completed: Switch evaluation order
- [ ] Completed: Switch with no condition
- [ ] Completed: Defer
- [ ] Completed: Stacking defers

L: self-paced, golang

---

I know about more types in Golang

On [A Tour of Go](https://tour.golang.org/welcome/1) complete the _More types_ section. Don't worry if it takes a while for pointers to sink in... That's normal!

## Acceptance Steps

* Talk to your mentor about what you've learnt

- [ ] Completed: Pointers
- [ ] Completed: Structs
- [ ] Completed: Struct Fields
- [ ] Completed: Pointers to structs
- [ ] Completed: Struct Literals
- [ ] Completed: Arrays
- [ ] Completed: Slices
- [ ] Completed: Slices are like references to arrays
- [ ] Completed: Slice literals
- [ ] Completed: Slice defaults
- [ ] Completed: Slice length and capacity
- [ ] Completed: Nil slices
- [ ] Completed: Creating a slice with make
- [ ] Completed: Slices of slices
- [ ] Completed: Appending to a slice
- [ ] Completed: Range
- [ ] Completed: Range continued
- [ ] Completed: Exercise: Slices
- [ ] Completed: Maps
- [ ] Completed: Map literals
- [ ] Completed: Map literals continued
- [ ] Completed: Mutating Maps
- [ ] Completed: Exercise: Maps
- [ ] Completed: Function values
- [ ] Completed: Function closures
- [ ] Completed: Exercise: Fibonacci closure

L: self-paced, golang

---

I know about methods and interfaces in Golang

On [A Tour of Go](https://tour.golang.org/welcome/1) complete the _Methods and interfaces_ section.

## Acceptance Steps

* Talk to your mentor about what you've learnt

- [ ] Completed: Methods
- [ ] Completed: Methods are functions
- [ ] Completed: Methods continued
- [ ] Completed: Pointer receivers
- [ ] Completed: Pointers and functions
- [ ] Completed: Methods and pointer indirection
- [ ] Completed: Methods and pointer indirection (2)
- [ ] Completed: Choosing a value or pointer receiver
- [ ] Completed: Interfaces
- [ ] Completed: Interfaces are implemented implicitly
- [ ] Completed: Interface values
- [ ] Completed: Interface values with nil underlying values
- [ ] Completed: Nil interface values
- [ ] Completed: The empty interface
- [ ] Completed: Type assertions
- [ ] Completed: Type switches
- [ ] Completed: Stringers
- [ ] Completed: Exercise: Stringers
- [ ] Completed: Errors
- [ ] Completed: Exercise: Errors
- [ ] Completed: Readers
- [ ] Completed: Exercise: Readers
- [ ] Completed: Exercise: rot13Reader
- [ ] Completed: Images
- [ ] Completed: Exercise: Images

L: self-paced, golang

---

I know about concurrency in Golang

On [A Tour of Go](https://tour.golang.org/welcome/1) complete the _Concurrency_ section.

## Acceptance Steps

* Talk to your mentor about what you've learnt

- [ ] Completed: Goroutines
- [ ] Completed: Channels
- [ ] Completed: Buffered Channels
- [ ] Completed: Range and Close
- [ ] Completed: Select
- [ ] Completed: Default Selection
- [ ] Completed: Exercise: Equivalent Binary Trees
- [ ] Completed: Exercise: Equivalent Binary Trees
- [ ] Completed: sync.Mutex
- [ ] Completed: Exercise: Web Crawler
- [ ] Read: Where to Go from here...

L: self-paced, golang

---
